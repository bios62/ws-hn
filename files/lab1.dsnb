[
  {
    "name" : "lab1",
    "description" : null,
    "tags" : null,
    "version" : "6",
    "layout" : "jupyter",
    "type" : "tp",
    "readOnly" : false,
    "snapshot" : false,
    "template" : null,
    "templateConfig" : null,
    "paragraphs" : [
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Lab 1, create data structure and populate historical data",
        "hasTitle" : true,
        "message" : [
          "%md",
          "In this lab you will create the data-model as follows:",
          "",
          "- `trip`: historical data from earlier trip with the EV, used as basis for  generating machine learning data.",
          "- `sensor_event`: main table for each update of the sensors, a new sensor_event  record is created. Basic event metadata, like id of sensor and timestamp  ",
          "- `sensor_event_values`: child table for conversion of JSON array to rows in a master child `sensor_event_values`  ",
          "- `current_speed`:  a table holding the current speed by pressing the accelerator of your car.  ",
          "- `positions`: table of GPS positions during tyhe trip, used to visualize a map.",
          "",
          "In Oracle SQL (23ai and above) you may add `if exists` or `if not exists` to DDL commands to avoid error message:",
          "",
          "- `drop table if exists`,  the table (object) will always be dropped, and no \\\"object do not exists\\\" message will be thrown, in case the table don't exists",
          "- `create table if not exists`, will create the table if it does not exists. If the table exists, no \\\"already exists\\\" error will be thrown"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725356887112,
          "endTime" : 1725356887350,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>In this lab you will create the data-model as follows:</p>\n<ul>\n<li><code>trip</code>: historical data from earlier trip with the EV, used as basis for  generating machine learning data.</li>\n<li><code>sensor_event</code>: main table for each update of the sensors, a new sensor_event  record is created. Basic event metadata, like id of sensor and timestamp</li>\n<li><code>sensor_event_values</code>: child table for conversion of JSON array to rows in a master child <code>sensor_event_values</code></li>\n<li><code>current_speed</code>:  a table holding the current speed by pressing the accelerator of your car.</li>\n<li><code>positions</code>: table of GPS positions during tyhe trip, used to visualize a map.</li>\n</ul>\n<p>In Oracle SQL (23ai and above) you may add <code>if exists</code> or <code>if not exists</code> to DDL commands to avoid error message:</p>\n<ul>\n<li><code>drop table if exists</code>,  the table (object) will always be dropped, and no &quot;object do not exists&quot; message will be thrown, in case the table don't exists</li>\n<li><code>create table if not exists</code>, will create the table if it does not exists. If the table exists, no &quot;already exists&quot; error will be thrown</li>\n</ul>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "In the lab we will use a Oracle 23ai as main data database\r",
          "The programming language for stored procedures in Oracle 23ai is PL/SQL, Python or JavaScript\r",
          "  \r",
          "For the admin procedures required to read data from S3 storage into tables, we will use PL/SQL in this lab."
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725356927271,
          "endTime" : 1725356927421,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>In the lab we will use a Oracle 23ai as main data database\nThe programming language for stored procedures in Oracle 23ai is PL/SQL, Python or JavaScript</p>\n<p>For the admin procedures required to read data from S3 storage into tables, we will use PL/SQL in this lab.</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "For simplicity we create a PL/SQL object, in the shape of a PL/SQL package that holds default values.  ",
          "If any values needs to be read or changed, we just use the GET or SET functions in the package"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725356947256,
          "endTime" : 1725356947421,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>For simplicity we create a PL/SQL object, in the shape of a PL/SQL package that holds default values.<br />\nIf any values needs to be read or changed, we just use the GET or SET functions in the package</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%script\r",
          "create or replace package lab_values as\r",
          "   aws_username varchar2(40);\r",
          "   aws_password varchar2(40);\r",
          "   S3_cred_name varchar2(20);\r",
          "   trip_file_name varchar2(20);\r",
          "   positions_file_name varchar2(30);\r",
          "   S3_location_uri   varchar2(100);\r",
          "   trip_table_name varchar2(20);\r",
          "   positions_table_name varchar2(30);\r",
          "   trip_table_column_list varchar2(1000);\r",
          "   trip_file_field_list varchar2(1000);\r",
          "   positions_table_column_list varchar2(1000);\r",
          "   positions_file_field_list varchar2(1000);\r",
          "\r",
          "      -- Get FUNCTIONs\r",
          "   FUNCTION get_trip_table_column_list RETURN VARCHAR2;\r",
          "   FUNCTION get_trip_file_field_list RETURN VARCHAR2;\r",
          "   FUNCTION get_positions_table_column_list RETURN VARCHAR2;\r",
          "   FUNCTION get_positions_file_field_list RETURN VARCHAR2;\r",
          "   FUNCTION get_aws_username return varchar2;\r",
          "   FUNCTION get_aws_password return varchar2;\r",
          "   FUNCTION get_S3_cred_name return varchar2;\r",
          "   FUNCTION get_trip_file_name return varchar2;\r",
          "   FUNCTION get_positions_file_name return varchar2;\r",
          "   FUNCTION get_S3_location_uri return varchar2;\r",
          "\r",
          "      -- Set PROCEDUREs\r",
          "\r",
          "   PROCEDURE set_trip_table_column_list(new_trip_table_column_list VARCHAR2);\r",
          "   PROCEDURE set_trip_file_field_list(new_trip_file_field_list VARCHAR2);\r",
          "   PROCEDURE set_positions_table_column_list(new_positions_table_column_list VARCHAR2);\r",
          "   PROCEDURE set_positions_file_field_list(new_positions_file_field_list VARCHAR2);\r",
          "   PROCEDURE set_aws_username (new_aws_username in varchar2);\r",
          "   PROCEDURE set_aws_password (new_aws_password in varchar2);\r",
          "   PROCEDURE set_S3_cred_name (new_S3_cred_name in varchar2);\r",
          "   PROCEDURE set_trip_file_name (new_trip_file_name in varchar2);\r",
          "   PROCEDURE set_positions_file_name (new_positions_file_name in varchar2);\r",
          "   PROCEDURE set_S3_location_uri (new_S3_location_uri in varchar2);\r",
          "\r",
          "end;\r",
          "/\r",
          "create or replace package body lab_values as\r",
          "\r",
          "\r",
          "   -- Get function for aws_username\r",
          "   FUNCTION get_aws_username return varchar2\r",
          "   as\r",
          "     begin\r",
          "       return(aws_username);\r",
          "    end;\r",
          "\r",
          "   -- Get function for aws_password   \r",
          "   FUNCTION get_aws_password return varchar2\r",
          "   as\r",
          "     begin\r",
          "       return(aws_password);\r",
          "    end;\r",
          "\r",
          "   -- Get function for S3_cred_name \r",
          "   FUNCTION get_S3_cred_name return varchar2\r",
          "   as\r",
          "     begin\r",
          "       return(S3_cred_name);\r",
          "    end;\r",
          "\r",
          "   -- Get function for trip_file_name  \r",
          "   FUNCTION get_trip_file_name return varchar2\r",
          "   as\r",
          "     begin\r",
          "       return(trip_file_name);\r",
          "    end;\r",
          "\r",
          "   -- Get function for positions_file_name\r",
          "   FUNCTION get_positions_file_name return varchar2\r",
          "   as\r",
          "     begin\r",
          "       return(positions_file_name);\r",
          "    end;\r",
          "\r",
          "   -- Get function for S3_location_uri\r",
          "   FUNCTION get_S3_location_uri return varchar2\r",
          "   as\r",
          "     begin\r",
          "       return(S3_location_uri);\r",
          "    end;\r",
          "\r",
          "    -- Get function for trip_table_column_list\r",
          "   FUNCTION get_trip_table_column_list RETURN VARCHAR2 IS\r",
          "   BEGIN\r",
          "      RETURN trip_table_column_list;\r",
          "   END get_trip_table_column_list;\r",
          "\r",
          "   -- Get function for trip_file_field_list\r",
          "   FUNCTION get_trip_file_field_list RETURN VARCHAR2 IS\r",
          "   BEGIN\r",
          "      RETURN trip_file_field_list;\r",
          "   END get_trip_file_field_list;\r",
          "\r",
          "   -- Get function for position_table_column_list\r",
          "   FUNCTION get_positions_table_column_list RETURN VARCHAR2 IS\r",
          "   BEGIN\r",
          "      RETURN positions_table_column_list;\r",
          "   END get_positions_table_column_list;\r",
          "\r",
          "   -- Get function for position_file_field_list\r",
          "   FUNCTION get_positions_file_field_list RETURN VARCHAR2 IS\r",
          "   BEGIN\r",
          "      RETURN positions_file_field_list;\r",
          "   END get_positions_file_field_list;\r",
          "   \r",
          "   -- Set procedure for aws_username\r",
          "   PROCEDURE set_aws_username (new_aws_username in varchar2)\r",
          "   as\r",
          "     begin\r",
          "       aws_username:=new_aws_username;\r",
          "    end;\r",
          "    \r",
          "   -- Set procedure for aws_password\r",
          "   PROCEDURE set_aws_password (new_aws_password in varchar2)\r",
          "   as\r",
          "     begin\r",
          "       aws_password:=new_aws_password;\r",
          "    end;\r",
          "    \r",
          "   -- Set procedure for S3_cred_name\r",
          "   PROCEDURE set_S3_cred_name (new_S3_cred_name in varchar2)\r",
          "   as\r",
          "     begin\r",
          "       S3_cred_name:=new_S3_cred_name;\r",
          "    end;   \r",
          "    \r",
          "   -- Set procedure for trip_file_name\r",
          "   PROCEDURE set_trip_file_name (new_trip_file_name in varchar2)\r",
          "   as\r",
          "     begin\r",
          "       trip_file_name:=new_trip_file_name;\r",
          "    end;   \r",
          "    \r",
          "   -- Set procedure for positions_file_name\r",
          "   PROCEDURE set_positions_file_name (new_positions_file_name in varchar2)\r",
          "   as\r",
          "     begin\r",
          "       positions_file_name:=new_positions_file_name;\r",
          "    end;   \r",
          "    \r",
          "   -- Set procedure for S3_location_uri\r",
          "   PROCEDURE set_S3_location_uri (new_S3_location_uri in varchar2)\r",
          "   as\r",
          "     begin\r",
          "       S3_location_uri:=new_S3_location_uri;\r",
          "    end;   \r",
          "    \r",
          "   -- Set procedure for trip_table_column_list\r",
          "   PROCEDURE set_trip_table_column_list(new_trip_table_column_list VARCHAR2) IS\r",
          "   BEGIN\r",
          "      trip_table_column_list := new_trip_table_column_list;\r",
          "   END set_trip_table_column_list;\r",
          "\r",
          "   -- Set procedure for trip_file_field_list\r",
          "   PROCEDURE set_trip_file_field_list(new_trip_file_field_list VARCHAR2) IS\r",
          "   BEGIN\r",
          "      trip_file_field_list := new_trip_file_field_list;\r",
          "   END set_trip_file_field_list;\r",
          "\r",
          "   -- Set procedure for position_table_column_list\r",
          "   PROCEDURE set_positions_table_column_list(new_positions_table_column_list VARCHAR2) IS\r",
          "   BEGIN\r",
          "      positions_table_column_list := new_positions_table_column_list;\r",
          "   END set_positions_table_column_list;\r",
          "\r",
          "   -- Set procedure for position_file_field_list\r",
          "   PROCEDURE set_positions_file_field_list(new_positions_file_field_list VARCHAR2) IS\r",
          "   BEGIN\r",
          "      positions_file_field_list := new_positions_file_field_list;\r",
          "   END set_positions_file_field_list;\r",
          "   begin\r",
          "      begin\r",
          "    trip_table_name :='trip';\r",
          "   positions_table_name :='positions';\r",
          "    end;\r",
          "end;\r",
          "/"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "Prior to running the lab the isntructor provides correct URL and credentials to the object storage bucket"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Prior to running the lab the isntructor provides correct URL and credentials to the object storage bucket</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Set Lab  Values",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "begin\r",
          "   lab_values.set_aws_username('janedoe');\r",
          "   lab_values.set_aws_password('GdHa7Egp3m<nHsOAwl+r');\r",
          "   lab_values.set_S3_cred_name('S3_store_cred');\r",
          "   lab_values.set_trip_file_name('kjoredataV2.csv');\r",
          "   lab_values.set_positions_file_name('positions.csv');\r",
          "   lab_values.set_S3_location_uri('https://objectstorage.eu-frankfurt-1.oraclecloud.com/n/fr5ksbyjpcxj/b/jzlabs/o/');\r",
          "end;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "The next step is to create a generic stored procedure that copy data from a csv file on S3 object storage into  ",
          "a table in the database"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The next step is to create a generic stored procedure that copy data from a csv file on S3 object storage into<br />\na table in the database</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%script\r",
          "create or replace procedure load_table_from_s3(p_table_name in varchar2, p_file_name in varchar2,p_s3_location_uri in varchar2, p_S3_cred_name in varchar2) \r",
          "AUTHID CURRENT_USER is\r",
          "  sqlstmt varchar2(100);\r",
          "  numrows integer;\r",
          "begin\r",
          "-- Copy kjoredata into the trip table\r",
          "    begin\r",
          "    --  Truncate table before data load\r",
          "    sqlstmt:= 'truncate table ';\r",
          "    sqlstmt:=sqlstmt||p_table_name;\r",
          "    DBMS_CLOUD.COPY_DATA(\r",
          "       table_name =>p_table_name,\r",
          "       credential_name =>p_S3_cred_name,\r",
          "       file_uri_list => p_S3_location_uri||p_file_name,\r",
          "       format => \r",
          "       json_object('type' value 'csv',  \r",
          "                     'skipheaders' value '1',\r",
          "                     'delimiter' value ',',\r",
          "                     'dateformat' value 'dd/mm/yy'));\r",
          "        sqlstmt:= 'select count(*) from ';\r",
          "        sqlstmt:=sqlstmt||p_table_name;\r",
          "        execute immediate sqlstmt  into numrows;\r",
          "        dbms_output.put_line('Successfully copied to '||p_table_name||' loaded: '||to_char(numrows)||' records');\r",
          "    exception\r",
          "        when others then\r",
          "        dbms_output.put_line('Sqlerror (Copy data): to '||p_table_name||' from '||p_S3_location_uri||p_file_name);\r",
          "            dbms_output.put_line(sqlcode);\r",
          "            dbms_output.put_line(sqlerrm);\r",
          "    end;\r",
          "  end;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "The TRIP table holds the historical measurements over speed, temp and KWH consumption"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The TRIP table holds the historical measurements over speed, temp and KWH consumption</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create the trip table",
        "hasTitle" : true,
        "message" : [
          "%script",
          "drop table if exists trip;",
          "CREATE TABLE trip ",
          "   (          \"DATO\" DATE, ",
          "              \"KL\" NUMBER(38,0), ",
          "              \"KM\" NUMBER(38,1), ",
          "              \"KMH\" NUMBER(38,1), ",
          "              \"KWP100\" NUMBER(38,1), ",
          "              \"KW\" NUMBER(38,1), ",
          "              \"ECO\" NUMBER(38,1), ",
          "              \"DCFC\" VARCHAR2(26 BYTE) COLLATE \"USING_NLS_COMP\", ",
          "              \"TARGET\" VARCHAR2(26 BYTE) COLLATE \"USING_NLS_COMP\", ",
          "              \"COUNTRY\" VARCHAR2(2 BYTE) COLLATE \"USING_NLS_COMP\", ",
          "              \"GEO\" VARCHAR2(2 BYTE) COLLATE \"USING_NLS_COMP\", ",
          "              \"CELSIUS\" NUMBER, ",
          "              \"MM\" NUMBER, ",
          "              \"HOH\" NUMBER(*,0), ",
          "              \"HDIF\" NUMBER",
          "   )"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "`positions` is a simpe table with date, time and geolocation for samples during the trip.  \r",
          "This table is not required for the machine learing or predictions,  \r",
          "but are reqrequired for a visualization of the trip on to a map"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725357055915,
          "endTime" : 1725357056032,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p><code>positions</code> is a simpe table with date, time and geolocation for samples during the trip.<br />\nThis table is not required for the machine learing or predictions,<br />\nbut are reqrequired for a visualization of the trip on to a map</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create positions table",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "drop table if exists positions;\r",
          "create table positions (\r",
          "DATO         DATE,\r",
          "KL           NUMBER,\r",
          "TARGET       VARCHAR2(4000),\r",
          "LAT          NUMBER,\r",
          "LON          NUMBER );"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "Prior to access S3 storage we need to create credentials object that holds the S3 username and authtoken"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Prior to access S3 storage we need to create credentials object that holds the S3 username and authtoken</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%script\r",
          "begin\r",
          "  dbms_cloud.create_credential (\r",
          "    credential_name => lab_values.S3_cred_name,\r",
          "    username        => lab_values.aws_username,\r",
          "    password        => lab_values.aws_password\r",
          "  ) ;\r",
          "end;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "List the files stored on the S3 storage bucket\r",
          " This can be done with curl, python, sql, or any language that speaks REST\r",
          " But in order to verify the PL/SQL above, we use SQL in this case"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>List the files stored on the S3 storage bucket\nThis can be done with curl, python, sql, or any language that speaks REST\nBut in order to verify the PL/SQL above, we use SQL in this case</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%sql\r",
          "select *\r",
          "from   dbms_cloud.list_objects(\r",
          "        credential_name => lab_values.get_S3_cred_name(),\r",
          "        location_uri    => lab_values.get_S3_location_uri());"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "The table trip is loaded by reading a csv file from object storage\r",
          "When done you should see the message \"Successfully copied to trip loaded: 82 records\""
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The table trip is loaded by reading a csv file from object storage\nWhen done you should see the message &quot;Successfully copied to trip loaded: 82 records&quot;</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Copy data into trip from S3 storage",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "begin\r",
          "  load_table_from_s3(lab_values.trip_table_name,lab_values.trip_file_name,lab_values.S3_location_uri,lab_values.s3_cred_name);\r",
          "end;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "The table positions is loaded by reading a csv file from object storage\r",
          "When done you should see the message \"Successfully copied to positions loaded: 164 records\""
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The table positions is loaded by reading a csv file from object storage\nWhen done you should see the message &quot;Successfully copied to positions loaded: 164 records&quot;</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Copy data into positions from S3 storage",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "begin\r",
          "  load_table_from_s3(lab_values.positions_table_name,lab_values.positions_file_name,lab_values.S3_location_uri,lab_values.s3_cred_name);\r",
          "end;\r",
          "/"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Support function for LAB 5, create_line function",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "create or replace function CREATE_LINE(\r",
          "                start_lon in number,\r",
          "                start_lat in number,\r",
          "                end_lon in number,\r",
          "                end_lat in number\r",
          "            ) return varchar2\r",
          " is\r",
          " l_return varchar2(4000);\r",
          "  begin\r",
          "  if start_lon is not null and start_lat is not null and end_lon is not null and end_lat is not null\r",
          "  then\r",
          "l_return := '\r",
          "{\r",
          "        \"type\": \"LineString\",\r",
          "        \"coordinates\": [\r",
          "          ['||to_char(start_lon,'9990D9999999999999999999')||', '||to_char(start_lat,'9990D9999999999999999999')||'],\r",
          "          ['||to_char(end_lon,'9990D9999999999999999999')||', '||to_char(end_lat,'9990D9999999999999999999')||']\r",
          "     \r",
          "        ]\r",
          "      \r",
          "}';\r",
          "\r",
          "end if;\r",
          "\r",
          "return l_return;\r",
          "end CREATE_LINE;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create sensor_event_values and sensor_event objetcs",
        "hasTitle" : true,
        "message" : [
          "%script",
          "",
          "drop table if exists sensor_event_values;",
          "drop table if exists sensor_event;",
          "",
          "create table sensor_event",
          "(eventid int,objecttag varchar2(30), ts timestamp default current_timestamp);",
          "alter table sensor_event add constraint event_pk primary key (eventid);",
          "",
          "create table sensor_event_values(",
          "eventid int,",
          "sensortag varchar2(30),",
          "sensorvalue number,",
          "sensortxt varchar2(4000));",
          "",
          "alter table sensor_event_values add constraint value_pk primary key (eventid,sensortag);",
          "alter table sensor_event_values add constraint values_fk foreign key (eventid) references sensor_event(eventid);"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "\r",
          "We will need to add a sequence to generate the primary key of sensor_venets, and reference key from `sensor_event_values`  \r",
          "The sequence is used as default auto-genererated value.  \r",
          "Normally you would use the `NUMBER GENERATED by default on null as IDENTITY` clause,  \r",
          "but in 23ai this causes an error when inserting into duality view"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725357116492,
          "endTime" : 1725357116613,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>We will need to add a sequence to generate the primary key of sensor_venets, and reference key from <code>sensor_event_values</code><br />\nThe sequence is used as default auto-genererated value.<br />\nNormally you would use the <code>NUMBER GENERATED by default on null as IDENTITY</code> clause,<br />\nbut in 23ai this causes an error when inserting into duality view</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Add default values to the sensor_event and sensor_event_values",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "-- \r",
          "create sequence if not exists event_seq;\r",
          "--\r",
          "alter table sensor_event modify (eventid DEFAULT ON NULL event_seq.nextval);\r",
          "alter table sensor_event modify (ts default on null current_timestamp);\r",
          "------------------------------------------\r",
          "-- For the parent child table add the latest ID as default value for the foreng key to the sensor-event_values table\r",
          "alter table sensor_event_values modify (eventid DEFAULT ON NULL event_seq.currval);"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Add some dummy records to the event master child tables",
        "hasTitle" : true,
        "message" : [
          "%md",
          "Add temp and humidity  \r",
          "Add a new sensor metadata record, sensor_event.  \r",
          "Then one row pr. sensor vale in the sensor_event_values table"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Add temp and humidity<br />\nAdd a new sensor metadata record, sensor_event.<br />\nThen one row pr. sensor vale in the sensor_event_values table</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Add some dummy records to the event master child tables",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "\r",
          "insert into sensor_event (objecttag) values ('TEST');\r",
          "select * from sensor_event order by eventid desc;\r",
          "insert into sensor_event_values (sensortag,sensorvalue) values ('Mc',20000);\r",
          "insert into sensor_event_values (sensortag,sensorvalue) values ('DEV',50);\r",
          "select * from sensor_event_Values order by eventid desc, sensortag;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "mysql style multirow insert (new in 23ai)",
        "hasTitle" : true,
        "message" : [
          "%md",
          "With 23ai Oracle introduced mysql style mltirow insert"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>With 23ai Oracle introduced mysql style mltirow insert</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%script\r",
          "\r",
          "insert into sensor_event (objecttag) values ('TEST-2');\r",
          "insert into sensor_event_values (sensortag,sensorvalue) values ('Mc',21000),('DEV',60);\r",
          "select * from sensor_event_values order by eventid desc, sensortag;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create current_speed table",
        "hasTitle" : true,
        "message" : [
          "%md",
          "The current_speed table is used to simlate current_speed registration  \r",
          "The device does not collect speed, only temp.  \r",
          "Current speed needs to be added manually always pick latest and greates"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : {
          "startTime" : 0,
          "endTime" : 0,
          "interpreter" : "md",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The current_speed table is used to simlate current_speed registration<br />\nThe device does not collect speed, only temp.<br />\nCurrent speed needs to be added manually always pick latest and greates</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create current_speed table",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "\r",
          "drop table if exists current_speed;\r",
          "create table current_speed (\r",
          "  id number GENERATED by default on null as IDENTITY,\r",
          "  logtime timestamp DEFAULT CURRENT_TIMESTAMP,\r",
          "  kmh number(6,1)\r",
          ");\r",
          "--\r",
          "--  Add initial speed value, well below normal drivng speed\r",
          "--\r",
          "insert into current_speed (kmh) values('42.2');\r",
          "--"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "For visibility, create SQL view for reporting",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "-- Reporting views :\r",
          "\r",
          "create or replace view all_sensor_values as\r",
          "select ts,objecttag,sensortag,sensorvalue,sensortxt from sensor_event,sensor_event_values\r",
          "where sensor_event.eventid=sensor_event_values.eventid;\r",
          "\r",
          "create or replace view current_sensor_values as\r",
          "select * from all_sensor_values where ts = (select max(ts) from all_Sensor_Values);"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Display the master/detail structure as one structure",
        "hasTitle" : true,
        "message" : [
          "%sql\r",
          "select * from all_sensor_values order by ts desc;"
        ],
        "selectedVisualization" : null,
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : null,
        "result" : null,
        "relations" : [ ],
        "dynamicFormParams" : null
      }
    ]
  }
]