[
  {
    "name" : "lab3",
    "description" : null,
    "tags" : null,
    "version" : "6",
    "layout" : "jupyter",
    "type" : "tp",
    "readOnly" : false,
    "snapshot" : false,
    "template" : null,
    "templateConfig" : null,
    "paragraphs" : [
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "The purpose of the lab is to introduce to two sibling concepts of REST access to the datamodel:  \r",
          "- REST enable GET access to a table\r",
          "- Oracle 23ai JSON Duality Views\r",
          "\r",
          "The REST API will GET the newest record form the current_speed table and   \r",
          "the duality view will showcase the simplicty of updating a master"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985385420,
          "endTime" : 1725985385486,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The purpose of the lab is to introduce to two sibling concepts of REST access to the datamodel:</p>\n<ul>\n<li>REST enable GET access to a table</li>\n<li>Oracle 23ai JSON Duality Views</li>\n</ul>\n<p>The REST API will GET the newest record form the current_speed table and<br />\nthe duality view will showcase the simplicty of updating a master</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Initial Python setup, define RESOURCE_URI and WORKSHOP_ID",
        "hasTitle" : true,
        "message" : [
          "%md",
          "We will test with python, lets define python global variables  \r",
          "  \r",
          "**RESOURCE_URI** points to the autonomous database resoruce, this will be provided by your instructor  \r",
          "**WORKSHOP_ID** your username in the workshop  \r",
          "  \r",
          "**Be kind, for simplicty in the workshop we do not authenticate the API**"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984949113,
          "endTime" : 1725984949178,
          "interpreter" : "md.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%python\r",
          "#\r",
          "# The URI to the API\r",
          "#\r",
          "API_VERSION='V1'\r",
          "RESOURCE_URI=('https://myatp.adb.eu-frankfurt-1.oraclecloudapps.com/').rstrip('/')\r",
          "print(RESOURCE_URI)\r",
          "WORKSHOP_ID='labuser05'\r"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984949273,
          "endTime" : 1725984949360,
          "interpreter" : "python.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Clean up the sensor_event  and sensor_event_values tables",
        "hasTitle" : true,
        "message" : [
          "%script",
          "truncate table sensor_event_values;",
          "truncate table sensor_event;"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984949458,
          "endTime" : 1725984951168,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "A duality view is a view that axepts insert of JSON payload, parse the JSON payload into a multi table, mulit row insert.   \r",
          "The view casts to JSON datatype and uses the json_arrayagg function. Oracle 23ai parses the JSON structure and inserts correctly into the master detail relational structure"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985389657,
          "endTime" : 1725985389719,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>A duality view is a view that axepts insert of JSON payload, parse the JSON payload into a multi table, mulit row insert.<br />\nThe view casts to JSON datatype and uses the json_arrayagg function. Oracle 23ai parses the JSON structure and inserts correctly into the master detail relational structure</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create the Duality View, that makes it possible to SELECT and INSERT complete Events",
        "hasTitle" : true,
        "message" : [
          "%sql",
          "create or replace json relational duality view post_values as",
          "select json {",
          "'_id' : eventid,",
          "'objecttag' : objecttag,",
          "'sensors':",
          "    (",
          "    select json_arrayagg(",
          "        JSON {",
          "                eventid,",
          "                sensortag,",
          "                sensorvalue",
          "             }",
          "    )",
          "    from sensor_event_values with insert",
          "    where x.eventid = sensor_event_values.eventid",
          "    )",
          "}",
          "from sensor_event x with insert;"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984951439,
          "endTime" : 1725984951562,
          "interpreter" : "sql.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "A insert of a JSON master detail, is shredded to a multirow insert in the child table and one insert in the master table  \r",
          "Remember in plain SQL in Oracle23ai, - it was possible to insert multiple rows in one single insert command.  \r",
          "With Duality views utilizes this new feature"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985393374,
          "endTime" : 1725985393454,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>A insert of a JSON master detail, is shredded to a multirow insert in the child table and one insert in the master table<br />\nRemember in plain SQL in Oracle23ai, - it was possible to insert multiple rows in one single insert command.<br />\nWith Duality views utilizes this new feature</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Multi row/master detail insert with JSON payload",
        "hasTitle" : true,
        "message" : [
          "%sql",
          "insert into post_values m (data)",
          "values ('",
          "{",
          "\"objecttag\" : 3 ,",
          "sensors : [ ",
          "{",
          "\"sensortag\" : \"mC\",",
          "\"sensorvalue\" : 29000",
          "},",
          "{",
          "\"sensortag\" : \"dev\",",
          "\"sensorvalue\" : 60",
          "},",
          "{",
          "\"sensortag\" : \"KMH\",",
          "\"sensorvalue\" : 80",
          "}",
          "]",
          "}');"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984951845,
          "endTime" : 1725984951966,
          "interpreter" : "sql.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Verify new inserts with relational view of the data",
        "hasTitle" : true,
        "message" : [
          "%sql",
          "select * from current_Sensor_values"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984952064,
          "endTime" : 1725984952165,
          "interpreter" : "sql.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "Lets start playing with REST  \r",
          "We will create  two types of API  \r",
          "- ORDS based, for GET operations, ORDS can do mulitrow POST, but duality view greatly simplyfies it  \r",
          "- JSON Duality view based, for POST of multi row JSON payload  \r",
          "\r",
          "Defining REST API can be done with Database REST API or with PL/SQL  \r",
          "In this lab we will use PL/SQL  \r",
          "\r",
          "ORDS consist of a module, template and handler, making up the URL `http://<databaseURL>/ords/username/module/template/`  \r",
          " with GET, PUT DELETE, PATCH or POST handlers  \r",
          " The Duality view require an ORDS Module and Template"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985398380,
          "endTime" : 1725985398445,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Lets start playing with REST<br />\nWe will create  two types of API</p>\n<ul>\n<li>ORDS based, for GET operations, ORDS can do mulitrow POST, but duality view greatly simplyfies it</li>\n<li>JSON Duality view based, for POST of multi row JSON payload</li>\n</ul>\n<p>Defining REST API can be done with Database REST API or with PL/SQL<br />\nIn this lab we will use PL/SQL</p>\n<p>ORDS consist of a module, template and handler, making up the URL <code>http://&lt;databaseURL&gt;/ords/username/module/template/</code><br />\nwith GET, PUT DELETE, PATCH or POST handlers<br />\nThe Duality view require an ORDS Module and Template</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "The simplest way of defining a rest API is to use the ORDS.ENABLE_OBJECT method, which creates the GET and POST handlers automatically"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985401748,
          "endTime" : 1725985401812,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>The simplest way of defining a rest API is to use the ORDS.ENABLE_OBJECT method, which creates the GET and POST handlers automatically</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Revisit current sensor values",
        "hasTitle" : true,
        "message" : [
          "%sql\r",
          "select * from current_sensor_values order by ts desc,sensortag"
        ],
        "selectedVisualization" : "table",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984952620,
          "endTime" : 1725984952723,
          "interpreter" : "sql.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "We create the API currentvalues, GET returns the most recent sensor values registered  ",
          "The API utilizes the feature of duality view  ",
          "The API will have the following URL:  ",
          "`https://<URL to your db>/ords/<your db name>/currentvalues/`  "
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985405831,
          "endTime" : 1725985405898,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>We create the API currentvalues, GET returns the most recent sensor values registered<br />\nThe API utilizes the feature of duality view<br />\nThe API will have the following URL:<br />\n<code>https://&lt;URL to your db&gt;/ords/&lt;your db name&gt;/currentvalues/</code></p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Define the currentvalue API with PL/SQL",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "DECLARE\r",
          "  PRAGMA AUTONOMOUS_TRANSACTION;\r",
          "BEGIN\r",
          "    dbms_output.enable(65000);\r",
          "    ORDS.ENABLE_OBJECT(p_enabled => TRUE,\r",
          "                       p_object => 'CURRENT_SENSOR_VALUES',\r",
          "                       p_object_type => 'VIEW',\r",
          "                       p_object_alias => 'currentvalues',\r",
          "                       p_auto_rest_auth => FALSE);\r",
          "\r",
          "    commit;\r",
          "    dbms_output.put_line('API successfully added');\r",
          "    exception\r",
          "        when others then\r",
          "        -- Ok drop an error message\r",
          "        dbms_output.put_line('Sqlerror: ');\r",
          "        dbms_output.put_line(sqlcode);\r",
          "        dbms_output.put_line(sqlerrm);\r",
          "END;"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984953001,
          "endTime" : 1725984953660,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "Lets run a block of python code that uses the latest API"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985411091,
          "endTime" : 1725985411175,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Lets run a block of python code that uses the latest API</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Simple REST call to fetch current sensor values",
        "hasTitle" : true,
        "message" : [
          "%python\r",
          "#\r",
          "#\r",
          "#  If missing, Python code, add  at first line\r",
          "#\r",
          "import json\r",
          "import requests\r",
          "\r",
          "apiURL=RESOURCE_URI+'/ords/'+WORKSHOP_ID+'/currentvalues'\r",
          "print(apiURL)\r",
          "# Send a GET request\r",
          "r = requests.get(apiURL, headers=None)\r",
          "\r",
          "if r.status_code <= 201:\r",
          "            print(json.dumps(json.loads(r.text),indent=2))\r",
          "            print(r.status_code)\r",
          "else:\r",
          "    print(\"Request failed\")\r",
          "    print(r.status_code)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984953916,
          "endTime" : 1725984954367,
          "interpreter" : "python.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "A duality view by it selves don't REST enable the view. The insert still has to be done with SQL",
          "",
          "There are two ways to REST enable database object, adding them as REST API with GET/DELETE/PATCH/POST methods:  ",
          "- AutoREST, simply enable the object and the ORDS server configures GET/POST/DELETE automatically",
          "- Explisit, for better control, create a ORDS template with the spesific handlers, one handler pr. HTTP werb.  ",
          "  ",
          "In this step you will use the autoREST feature, and create a REST API directly for the `POST_VAUES` duality view.  ",
          "The REST metadata will be created, using the ORDS packaged with the ENABLE_OBJECT sub program.",
          "The URL pattern for the REST API is defined in the `p_object_alias` parameter.",
          "",
          "The ENABLE_OBJECT sub program",
          "",
          "This API will thennutilize duality view to POST a JSON payload to the sensor_values data structure with multirow insert  ",
          "",
          "The format of the URL to the API will be: `https://<your database URL>/ords/<your database username>/sensorapi/`"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985415254,
          "endTime" : 1725985415325,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>A duality view by it selves don't REST enable the view. The insert still has to be done with SQL</p>\n<p>There are two ways to REST enable database object, adding them as REST API with GET/DELETE/PATCH/POST methods:</p>\n<ul>\n<li>AutoREST, simply enable the object and the ORDS server configures GET/POST/DELETE automatically</li>\n<li>Explisit, for better control, create a ORDS template with the spesific handlers, one handler pr. HTTP werb.</li>\n</ul>\n<p>In this step you will use the autoREST feature, and create a REST API directly for the <code>POST_VAUES</code> duality view.<br />\nThe REST metadata will be created, using the ORDS packaged with the ENABLE_OBJECT sub program.\nThe URL pattern for the REST API is defined in the <code>p_object_alias</code> parameter.</p>\n<p>The ENABLE_OBJECT sub program</p>\n<p>This API will thennutilize duality view to POST a JSON payload to the sensor_values data structure with multirow insert</p>\n<p>The format of the URL to the API will be: <code>https://&lt;your database URL&gt;/ords/&lt;your database username&gt;/sensorapi/</code></p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Define the sensorapi API with PL/SQL",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "DECLARE\r",
          "  PRAGMA AUTONOMOUS_TRANSACTION;\r",
          "BEGIN\r",
          "    dbms_output.enable(65000);\r",
          "    ORDS.ENABLE_OBJECT(p_enabled => TRUE,\r",
          "                       p_object => 'POST_VALUES',\r",
          "                       p_object_type => 'VIEW',\r",
          "                       p_object_alias => 'sensorapi',\r",
          "                       p_auto_rest_auth => FALSE);\r",
          "\r",
          "    commit;\r",
          "    dbms_output.put_line('API successfully added');\r",
          "    exception\r",
          "        when others then\r",
          "        -- Ok drop an error message\r",
          "        dbms_output.put_line('Sqlerror: ');\r",
          "        dbms_output.put_line(sqlcode);\r",
          "        dbms_output.put_line(sqlerrm);\r",
          "END;\r",
          "/"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984954638,
          "endTime" : 1725984954734,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "Run a quick python test"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985421188,
          "endTime" : 1725985421249,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Run a quick python test</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : " Python REST to fetch all sensorvalues",
        "hasTitle" : true,
        "message" : [
          "%python\r",
          "#\r",
          "# \r",
          "# If %pythin missing in the first line add  at first\r",
          "#\r",
          "# Lets veryify the REST API using GET, with a simple Python Script\r",
          "import requests\r",
          "import json\r",
          "apiURL=RESOURCE_URI+'/ords/'+WORKSHOP_ID+'/sensorapi/'\r",
          "# Send a GET request\r",
          "r = requests.get(apiURL, headers=None)\r",
          "\r",
          "if r.status_code <= 201:\r",
          "            print(json.dumps(json.loads(r.text),indent=2))\r",
          "            print(r.status_code)\r",
          "else:\r",
          "    print(\"Request failed\")\r",
          "    print(r.status_code)"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984955007,
          "endTime" : 1725984955160,
          "interpreter" : "python.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md\r",
          "Now we are going to define ORDS REST API for GET `/wsapi/V1` kmh and `GET /wsapi/V1/predict?kmh=xxx&temp=xxx`  \r",
          "First step is to remove any ORDS module that might exists. The plain API will throw an exception if the module does not exist, so we add a exception handler  \r",
          "The steps are:\r",
          "- remove existing workshop module if exists\r",
          "- create workshop module for `/wsapi/V1`\r",
          "- create template and handlers for kmh, GET handler for retrieving the most recent value, current value, and a POST handler for inserting new current value\r",
          "- create `/wsapi/V1` for prediction"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985426194,
          "endTime" : 1725985426264,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Now we are going to define ORDS REST API for GET <code>/wsapi/V1</code> kmh and <code>GET /wsapi/V1/predict?kmh=xxx&amp;temp=xxx</code><br />\nFirst step is to remove any ORDS module that might exists. The plain API will throw an exception if the module does not exist, so we add a exception handler<br />\nThe steps are:</p>\n<ul>\n<li>remove existing workshop module if exists</li>\n<li>create workshop module for <code>/wsapi/V1</code></li>\n<li>create template and handlers for kmh, GET handler for retrieving the most recent value, current value, and a POST handler for inserting new current value</li>\n<li>create <code>/wsapi/V1</code> for prediction</li>\n</ul>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Delete any existing  workshop module",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "declare\r",
          "  module_name VARCHAR2(100):='workshop';\r",
          "begin\r",
          "    dbms_output.enable(65000);\r",
          "    ORDS.DELETE_MODULE(module_name);\r",
          "    dbms_output.put_line('Module: '||module_name||' successfully deleted');\r",
          "    commit;\r",
          "  exception\r",
          "    when others then\r",
          "      -- Ok drop an error message\r",
          "      dbms_output.put_line('Sqlerror: ');\r",
          "      dbms_output.put_line(sqlcode);\r",
          "      dbms_output.put_line(sqlerrm);\r",
          "end;\r",
          "/"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984955450,
          "endTime" : 1725984955554,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "Next step is to create the module `workshop` with apipath `/wsapi/V1`",
          "In the terms of defining a REST API a module is a collection of APIs.  ",
          "The module defines metadata like base URI for the API.  ",
          "Modules are typical the level where the API version is defined, in the name convension for the module.  ",
          "The `base_path` may also include the version, it is a common best practise   ",
          "In this lab the base URI will be:  ",
          "`https://<URL to database>/ords/<your username>/<module base pathname>/apiname/`",
          "The module is created with the `ORDS.DEFINE_MODULE`sub program"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985430700,
          "endTime" : 1725985430760,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Next step is to create the module <code>workshop</code> with apipath <code>/wsapi/V1</code>\nIn the terms of defining a REST API a module is a collection of APIs.<br />\nThe module defines metadata like base URI for the API.<br />\nModules are typical the level where the API version is defined, in the name convension for the module.<br />\nThe <code>base_path</code> may also include the version, it is a common best practise<br />\nIn this lab the base URI will be:<br />\n<code>https://&lt;URL to database&gt;/ords/&lt;your username&gt;/&lt;module base pathname&gt;/apiname/</code><br />\nThe module is created with the <code>ORDS.DEFINE_MODULE</code>sub program</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Create Module",
        "hasTitle" : true,
        "message" : [
          "%script\r",
          "declare\r",
          "  module_version varchar2(3):='V1';  -- Module version control\r",
          "  module_name VARCHAR2(100):='workshop-'||module_version;\r",
          "  base_path VARCHAR2(100):='/wsapi/'||module_version||'/';\r",
          "BEGIN\r",
          "        dbms_output.enable(65000);\r",
          "        ORDS.DEFINE_MODULE(\r",
          "            p_module_name => module_name,\r",
          "            p_base_path => base_path,\r",
          "            p_items_per_page=> 25,\r",
          "            p_status => 'PUBLISHED',\r",
          "        p_comments=> ''\r",
          "        );\r",
          "        dbms_output.put_line('Module: '||module_name||' successfully created');\r",
          "        commit;\r",
          "    exception\r",
          "        when others then\r",
          "        -- Ok drop an error message\r",
          "        dbms_output.put_line('Sqlerror: ');\r",
          "        dbms_output.put_line(sqlcode);\r",
          "        dbms_output.put_line(sqlerrm);\r",
          "END;\r",
          "/"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984955831,
          "endTime" : 1725984955931,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "When a moulule is created, the next step is to create a template, the metadata for an individual API in the module.",
          "In the following steps the kmh template is created with two handlers one GET handler for fetching the current value of current_speed (your accelerator reading)  ",
          "and a POST handler, for setting the current speed_reading (accelerator position)  ",
          "",
          "Create the template `kmh` and the handlers with the `ORDS.DEFINE_TEMPLATE` and `ORDS.CREATE_HANDLER` sub programs"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985435325,
          "endTime" : 1725985435403,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>When a moulule is created, the next step is to create a template, the metadata for an individual API in the module.\nIn the following steps the kmh template is created with two handlers one GET handler for fetching the current value of current_speed (your accelerator reading)<br />\nand a POST handler, for setting the current speed_reading (accelerator position)</p>\n<p>Create the template <code>kmh</code> and the handlers with the <code>ORDS.DEFINE_TEMPLATE</code> and <code>ORDS.CREATE_HANDLER</code> sub programs</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%script\r",
          "--\r",
          "--  DEFINE TEMPLATE kmh, API GET last kmh only\r",
          "--\r",
          "declare\r",
          "  module_version varchar2(3):='V1'; -- Module version control\r",
          "  module_name VARCHAR2(100):='workshop-'||module_version;\r",
          "BEGIN\r",
          "    dbms_output.enable(65000);\r",
          "    ORDS.DEFINE_TEMPLATE(\r",
          "        p_module_name => module_name,\r",
          "        p_pattern => 'kmh',\r",
          "        p_priority => 0,\r",
          "        p_etag_type => 'HASH',\r",
          "        p_comments => ''\r",
          "    );\r",
          "    dbms_output.put_line('kmh template successfully added');\r",
          "    ORDS.DEFINE_HANDLER(\r",
          "        p_module_name => module_name,\r",
          "        p_pattern => 'kmh',\r",
          "        p_method => 'GET',\r",
          "        p_source_type => ords.source_type_collection_feed,\r",
          "        p_source => 'select kmh from current_speed where logtime = (select max(logtime) from current_speed)',\r",
          "        p_items_per_page => 25,\r",
          "        p_comments => '',\r",
          "        p_mimes_allowed => 'application/json'\r",
          "    );\r",
          "    dbms_output.put_line('kmh GET handler successfully defined');\r",
          "    ORDS.DEFINE_HANDLER(\r",
          "        p_module_name => module_name,\r",
          "        p_pattern => 'kmh',\r",
          "        p_method => 'POST',\r",
          "        p_source_type => ords.source_type_plsql,\r",
          "        p_source => 'begin insert into current_speed (kmh) values(:kmh); commit; end;',\r",
          "        p_items_per_page => 25,\r",
          "        p_comments => '',\r",
          "        p_mimes_allowed => 'application/json'\r",
          "    );\r",
          "    dbms_output.put_line('kmh POST handler successfully defined');\r",
          "    COMMIT;\r",
          "    exception\r",
          "        when others then\r",
          "        -- Ok drop an error message\r",
          "        dbms_output.put_line('Sqlerror: ');\r",
          "        dbms_output.put_line(sqlcode);\r",
          "        dbms_output.put_line(sqlerrm);\r",
          "END;\r",
          "/"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984956201,
          "endTime" : 1725984956297,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "Finally create the REST API that call the earlier created Machine Learning, and creates a prediction about power consumption given temp and speed"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985441500,
          "endTime" : 1725985441571,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>Finally create the REST API that call the earlier created Machine Learning, and creates a prediction about power consumption given temp and speed</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%script\r",
          "--\r",
          "--  DEFINE TEMPLATE predict, API for GET new prediction\r",
          "--\r",
          "declare\r",
          "  module_version varchar2(3):='V1'; -- Module version control\r",
          "  module_name VARCHAR2(100):='workshop-'||module_version;\r",
          "BEGIN\r",
          "    dbms_output.enable(65000);\r",
          "    ORDS.DEFINE_TEMPLATE(\r",
          "        p_module_name => module_name,\r",
          "        p_pattern => 'predict',\r",
          "        p_priority => 0,\r",
          "        p_etag_type => 'HASH',\r",
          "        p_comments => ''\r",
          "    );\r",
          "    COMMIT;\r",
          "    dbms_output.put_line('predict template successfully added');\r",
          "--\r",
          "-- define GET handler for calling predict_consumption PL/SQL\r",
          "--\r",
          "    ORDS.DEFINE_HANDLER(\r",
          "        p_module_name => module_name,\r",
          "        p_pattern => 'predict',\r",
          "        p_method => 'GET',\r",
          "        p_source_type => ords.source_type_plsql,\r",
          "        p_source => 'begin :p_result:=predict_consumption(:p_kmh,:p_temp); end;',\r",
          "        p_items_per_page => 25,\r",
          "        p_comments => '',\r",
          "        p_mimes_allowed => 'application/json'\r",
          "    );\r",
          "    COMMIT;\r",
          "    dbms_output.put_line('predict GET handler successfully added');\r",
          "--\r",
          "-- Define output parameter from PL/SQL to be returned to REST API\r",
          "--\r",
          "    ORDS.DEFINE_PARAMETER(\r",
          "        p_module_name => module_name,\r",
          "        p_pattern => 'predict',\r",
          "        p_method => 'GET',\r",
          "        p_name => 'result',\r",
          "        p_bind_variable_name => 'p_result',\r",
          "        p_source_type => 'RESPONSE',\r",
          "        p_access_method => 'OUT',\r",
          "        p_comments => '',\r",
          "        p_param_type => 'STRING'\r",
          "    );\r",
          "    COMMIT; \r",
          "    dbms_output.put_line('response output obejct successfully added');\r",
          "    exception\r",
          "        when others then\r",
          "        -- Ok drop an error message\r",
          "        dbms_output.put_line('Sqlerror: ');\r",
          "        dbms_output.put_line(sqlcode);\r",
          "        dbms_output.put_line(sqlerrm);\r",
          "END;\r",
          "/"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984956569,
          "endTime" : 1725984956666,
          "interpreter" : "script.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : null,
        "hasTitle" : false,
        "message" : [
          "%md",
          "",
          "And let us glue it all together in a piece of python code that retrieves both the current_speed and the last temperature and finally creates a prediction"
        ],
        "selectedVisualization" : "html",
        "visualizationConfig" : null,
        "hideCode" : true,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : true,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725985447276,
          "endTime" : 1725985447342,
          "interpreter" : "md.tp",
          "taskStatus" : "SUCCESS",
          "status" : "SUCCESS",
          "results" : [
            {
              "message" : "<p>And let us glue it all together in a piece of python code that retrieves both the current_speed and the last temperature and finally creates a prediction</p>\n",
              "type" : "HTML"
            }
          ],
          "forms" : "[]"
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Python Code that sets the current speed, simulater the accelerator",
        "hasTitle" : true,
        "message" : [
          "%python\r",
          "#\r",
          "# If missing, Python code, add  at first line\r",
          "#\r",
          "import requests\r",
          "import json\r",
          "#\r",
          "# Set new speed\r",
          "#\r",
          "current_speed=4.5\r",
          "#\r",
          "# apiURL\r",
          "#\r",
          "apiURL=RESOURCE_URI+'/ords/'+WORKSHOP_ID+'/wsapi/'+API_VERSION+'/kmh'\r",
          "#\r",
          "#  Update the currents speed\r",
          "#\r",
          "json_payload={'kmh':current_speed}\r",
          "payload=json.dumps(json_payload)\r",
          "headers={'Content-Type':'application/json'}\r",
          "#\r",
          "# When using the reqeust library two different errors might occur, a failed requets trows an exception or the stauscode s not 200 | 201\r",
          "#\r",
          "try:\r",
          "    operations='POST'\r",
          "    r = requests.post(apiURL, headers=headers, data=payload)\r",
          "    print(apiURL)\r",
          "    print(payload)\r",
          "    if r.status_code <=201:\r",
          "        print('current_speed sucsessfully updated')\r",
          "        #\r",
          "        # Read back current_speed for verification\r",
          "        #\r",
          "        r = requests.get(apiURL, headers=None)\r",
          "        print (r.text)\r",
          "        if r.status_code <=201:\r",
          "            current_speed=(json.loads(r.text))[\"items\"][0]['kmh']\r",
          "            print(current_speed)\r",
          "        else:\r",
          "            print('GET URL: '+apiURL)\r",
          "            print('GET Failed, Statuscode: '+str(r.status_code))\r",
          "    else:\r",
          "        print('POST URL: '+apiURL)\r",
          "        print('POST Payload: '+payload)\r",
          "        print('POST Failed, Statuscode: '+str(r.status_code))\r",
          "except exception as e:\r",
          "    print(e)\r",
          "    \r",
          "\r"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984956938,
          "endTime" : 1725984957270,
          "interpreter" : "python.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      },
      {
        "row" : 0,
        "col" : 0,
        "sizeX" : 0,
        "width" : 0,
        "title" : "Python example that fetches current sensor value and predict power consumption",
        "hasTitle" : true,
        "message" : [
          "%python\r",
          "#\r",
          "# If missing, Python code, add  at first line\r",
          "#\r",
          "import requests\r",
          "import json\r",
          "#\r",
          "# Define API URLs\r",
          "#\r",
          "predict_apiURL=RESOURCE_URI+'/ords/'+WORKSHOP_ID+'/wsapi/'+API_VERSION+'/predict'\r",
          "kmh_apiURL=RESOURCE_URI+'/ords/'+WORKSHOP_ID+'/wsapi/'+API_VERSION+'/kmh'\r",
          "currentvalues_apiURL=RESOURCE_URI+'/ords/'+WORKSHOP_ID+'/currentvalues'\r",
          "#\r",
          "# Process GET current_speed, last_Sensor values and perform prediction\r",
          "#\r",
          "try:\r",
          "    #\r",
          "    # First get the current speed\r",
          "    #\r",
          "    \r",
          "    #\r",
          "    # Send a GET request\r",
          "    #\r",
          "    r = requests.get(kmh_apiURL, headers=None)\r",
          "    if r.status_code <=201:\r",
          "        current_speed=(json.loads(r.text))[\"items\"][0]['kmh']\r",
          "        print(\"Current speed: \"+str(current_speed))\r",
          "        #\r",
          "        # GET the current temp value\r",
          "        # Note the difference in URL for currentvalue, it originates from auto rest (ORDS)\r",
          "        #\r",
          " \r",
          "        print(currentvalues_apiURL)\r",
          "        r = requests.get(currentvalues_apiURL, headers=None)\r",
          "        if r.status_code <=201:\r",
          "            #\r",
          "            # Sensor values is returned in a JSON 'items' array\r",
          "            # Iterate over it to find the milli celcius value\r",
          "            #\r",
          "            sensorvalues=json.loads(r.text)['items']\r",
          "            temp=None\r",
          "            for sensor in sensorvalues:\r",
          "                if sensor['sensortag'] == 'mC':\r",
          "                    temp=sensor['sensorvalue']/1000\r",
          "            if temp is None:\r",
          "                print('No milli celcius value found in the last sensorvaluse set')\r",
          "                print('Using default value')\r",
          "                temp=3.13\r",
          "            else:\r",
          "                print('Current temp: '+str(temp))\r",
          "            #\r",
          "            # Create prediction\r",
          "            #\r",
          "            predict_apiURL=predict_apiURL+'?p_kmh='+str(current_speed)+'&p_temp='+str(temp)\r",
          "            r = requests.get(predict_apiURL, headers=None)\r",
          "            if r.status_code <= 201:\r",
          "                print(\"Sucessfully predicted power consumption\")\r",
          "                print(json.dumps(json.loads(r.text),indent=2))\r",
          "            else:\r",
          "                print('Prediction failed: '+str(r.status_code))\r",
          "                print('URL: '+predict_apiURL)\r",
          "        else:\r",
          "            print('GET last sensorvalues failed: '+str(r.status_code))\r",
          "            print('URL: '+predict_apiURL)\r",
          "    else:\r",
          "        print('GET current_speed failed: '+str(r.status_code))\r",
          "        print('URL: '+predict_apiURL)\r",
          "except Exception as e:\r",
          "    print(e)\r"
        ],
        "selectedVisualization" : "raw",
        "visualizationConfig" : null,
        "hideCode" : false,
        "hideResult" : false,
        "hideGutter" : true,
        "hideVizConfig" : false,
        "hideInIFrame" : false,
        "enabled" : true,
        "forms" : "[]",
        "result" : {
          "startTime" : 1725984957366,
          "endTime" : 1725984957875,
          "interpreter" : "python.tp",
          "taskStatus" : null,
          "status" : null,
          "results" : null,
          "forms" : null
        },
        "relations" : [ ],
        "dynamicFormParams" : "{}"
      }
    ]
  }
]